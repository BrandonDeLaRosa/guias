CRUD SEQUELIZE (SERVICES; CONTROLLERS; ROUTES).

===========================
GET ALL           <-------------------------

-SERVICES



class DoctorServices {

    static async getAllDoctors(){
        try {
            const doctors = await Doctors.findAll();
            return doctors
        } catch (error) {
            throw (error)
        }
    }


-CONTROLLER

const DoctorServices = require("../services/Doctor.services")


const getDoctors = async (req, res) => {
    try {
        const doctors = await DoctorServices.getAllDoctors();
        res.status(200).json(doctors)
    } catch (error) {
        res.status(400).json(error)
    }
}


- ROUTES

const  { Router } = require ('express');
const { getDoctors, createDoctor, getDoctor } = require('../controllers/DoctorControllers');


const router = Router();

router.get('/api/v1/doctors', getDoctors);


==================================================================================================

  CREATE         <-----------------------------------------

-SERVICE
static async createDoctor (newDoctor){
        try {
            const doctor = await Doctors.create(newDoctor)
            return doctor
        } catch (error) {
            throw (error)
        }
    }




-CONTROLLER
const createDoctor = async (req, res) => {
    try {
        const newDoctor = req.body;
        const result = await DoctorServices.createDoctor(newDoctor)
        res.status(200).json(result)
    } catch (error) {
        res.status(400).json(error)
    }
}


-ROUTE

router.post('/api/v1/addDoctor', createDoctor);

===================================================================================================


GET BY USERNAME  <------------------------------------------------


-SERVICE

static async getPatientByName(name) {
        try {
          const patient = await Patients.findOne({
            where: { name },
            include: [
              {
                model: NutritionPlans,
                include: [
                  {
                    model: Messures,
                  },
                ],
              },
            ],
          });
          return patient;
       } catch (error) {
          throw error;
   }
}


-CONTROLLER 

const getPatientByName = async (req, res) => {
  try {
    const { name } = req.body; 
    const patient = await PatientServices.getPatientByName(name);

    if (!patient) {
      return res.status(404).json({ message: 'Paciente no encontrado' });
    }

    res.status(200).json(patient);
  } catch (error) {
    res.status(500).json({ message: 'Error interno del servidor' });
  }
};


-ROUTES


router.post('/api/v1/patient-name', getPatientByName);


====================================================================================

-GET BY ID   <------------------------------------------


-SERVICE

  static async getAdmin(id){
        console.log(id);
        try {
            const admin = await SchoolAdmin.findByPk(id)
            return admin
        } catch (error) {
            throw(error)
        }
    }


-CONTROLLER

const getOneAdmin = async (req,res,next) => {
    try {
        const {id} = req.params;
        const admin = await SchoolAdminServices.getAdmin(id);
        res.status(201).json(admin);
    } catch (error) {
        res.status(400).json(error)
    }
}


-ROUTES

FINALIZAR LA CONSULTA ".GET" CON   /admin/:id <---


========================================================================

UPDATE <--------------------------------------------------



-SERVICE.

 static async updateOneAdmin(id,adminBody){
        try {
            const updated = await SchoolAdmin.update(adminBody,{
                where: {id}
            });
            return updated
        } catch (error) {
            throw(error)
        }
    }




- CONTROLLER

const updateAdmin = async (req,res,next) => {
    try {
        const {id} = req.params;
        const adminBody = req.body;
        const updatedAdmin = await SchoolAdminServices.updateOneAdmin(id, adminBody);
        res.status(201).json(updatedAdmin)
    } catch (error) {
        res.status(400).json(error)
        console.log(error);
    }
}


-ROUTE    FINALIZAR LA CONSULTA ".PUT" CON   /admin/:id <---


=================================================================================================

DELETE               <-----------------------------------------------



-SERVICE.

static async deleteOneAdmin(id){
        try {
            const deleted = await SchoolAdmin.destroy({
                where: {id}
            })
            return deleted
        } catch (error) {
            throw(error)
        }
    }




- CONTROLLER


const deleteAdmin = async (req,res,next) => {
    try {
        const {id} = req.params;
        const deletedAdmin = await SchoolAdminServices.deleteOneAdmin(id);
        res.status(201).json(deletedAdmin)
    } catch (error) {
        res.status(400).json(error)
    }
}


-ROUTE    FINALIZAR LA CONSULTA ".DELETE" CON   /admin/:id <---

